name: Build & Deploy Booking CRM

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ------ Backend ------
      - name: Setup Node.js for backend
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Build and pack backend
        working-directory: backend
        run: |
          npm ci
          npm run build
          mkdir -p ../temp-backend/dist
          mkdir -p ../temp-backend/resources

          cp -r dist/* ../temp-backend/dist/

          cp -r resources/* ../temp-backend/resources/

          cp package.json package-lock.json ../temp-backend/
          cp knexfile.js ../temp-backend/
          cp ecosystem.config.js ../temp-backend/
          cp -r migrations ../temp-backend/
          cp -r scripts ../temp-backend/
          cp -r monitoring ../temp-backend/
          cp LOGGING_GUIDE.md LOGGING_EXAMPLES.md ../temp-backend/

          mkdir -p ../temp-backend/public/images
          mkdir -p ../temp-backend/logs

          echo "Email templates copied:"
          ls -la ../temp-backend/resources/templates/emails/

          cd ..
          tar czf backend.tar.gz -C temp-backend .
          rm -rf temp-backend
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend.tar.gz

      # ------ Frontend ------
      - name: Setup Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Inject production env for frontend
        run: |
          cat > frontend/.env.production << 'EOF'
          REACT_APP_API_URL=${{ secrets.FRONTEND_API_URL }}
          EOF

      - name: Build and pack frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build
          tar czf ../frontend.tar.gz build
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend.tar.gz

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend-build

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build

      - name: Flatten artifacts
        run: |
          mv backend-build/backend.tar.gz ./backend.tar.gz
          mv frontend-build/frontend.tar.gz ./frontend.tar.gz

      - name: Copy artifacts to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: backend.tar.gz,frontend.tar.gz
          target: ${{ secrets.EC2_DEPLOY_PATH }}

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.EC2_DEPLOY_PATH }}

            sudo chown -R $USER:$USER .

            # --- Backend deployment ---
            # Backup .env.production before cleaning backend folder
            if [ -f "backend/.env.production" ]; then
              cp backend/.env.production /tmp/.env.production.backup
            fi

            # Preserve images and logs directories
            if [ -d "backend/public/images" ]; then
              echo "Preserving images directory..."
              mv backend/public/images /tmp/booking-images
            fi

            if [ -d "backend/logs" ]; then
              echo "Preserving logs directory..."
              mv backend/logs /tmp/booking-logs
            fi

            rm -rf backend
            mkdir -p backend
            tar xzf backend.tar.gz -C backend

            # Restore images
            mkdir -p backend/public
            if [ -d "/tmp/booking-images" ]; then
              echo "Restoring images directory..."
              rm -rf backend/public/images
              mv /tmp/booking-images backend/public/images
            else
              mkdir -p backend/public/images
            fi

            # Restore logs
            if [ -d "/tmp/booking-logs" ]; then
              echo "Restoring logs directory..."
              rm -rf backend/logs
              mv /tmp/booking-logs backend/logs
            else
              mkdir -p backend/logs
            fi

            # Set proper permissions
            sudo chown -R $USER:$USER backend/public/images backend/logs
            sudo chmod -R 777 backend/public/images
            sudo chmod -R 755 backend/logs

            # Restore .env.production and copy to .env
            if [ -f "/tmp/.env.production.backup" ]; then
              cp /tmp/.env.production.backup backend/.env.production
              cp backend/.env.production backend/.env
              rm /tmp/.env.production.backup
            else
              echo "⚠️  Warning: backend/.env.production not found on server!"
            fi

            cd backend
            npm ci

            echo "Checking email templates..."
            ls -la resources/templates/emails/

            echo "Checking logging setup..."
            ls -la logs/ || echo "Logs directory will be created by application"
            ls -la monitoring/ || echo "Monitoring directory missing"
            ls -la ecosystem.config.js || echo "PM2 config missing"

            # Install PM2 log rotation if not already installed
            pm2 install pm2-logrotate || echo "PM2 logrotate already installed"

            # Configure PM2 log rotation
            pm2 set pm2-logrotate:max_size 50M
            pm2 set pm2-logrotate:retain 30
            pm2 set pm2-logrotate:compress true

            # Stop old instance and start with PM2 ecosystem config
            pm2 delete booking-backend || true

            if [ -f "ecosystem.config.js" ]; then
              echo "Starting with PM2 ecosystem config..."
              pm2 start ecosystem.config.js --env production
            else
              echo "Fallback: Starting with basic PM2 config..."
              pm2 start dist/server.js \
                --name booking-backend \
                --cwd ${{ secrets.EC2_DEPLOY_PATH }}/backend \
                --env production
            fi

            # Save PM2 configuration
            pm2 save

            echo "PM2 status after deployment:"
            pm2 status
            cd ..

            # --- Frontend deployment ---
            rm -rf frontend
            mkdir -p frontend
            tar xzf frontend.tar.gz -C frontend --strip-components=1

            # --- Clean up archives ---
            rm -f backend.tar.gz frontend.tar.gz
