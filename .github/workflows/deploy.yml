name: Build & Deploy Booking CRM

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # ------ Backend ------
      - name: Setup Node.js for backend
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Build and pack backend
        working-directory: backend
        run: |
          npm ci
          npm run build
          tar czf ../backend.tar.gz dist package.json package-lock.json migrations scripts knexfile.js

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend.tar.gz

      # ------ Frontend ------
      - name: Setup Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Inject production env for frontend
        run: |
          cat > frontend/.env.production << 'EOF'
          REACT_APP_API_URL=${{ secrets.FRONTEND_API_URL }}
          EOF

      - name: Build and pack frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build
          tar czf ../frontend.tar.gz build
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend.tar.gz

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend-build

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build

      - name: Flatten artifacts
        run: |
          mv backend-build/backend.tar.gz ./backend.tar.gz
          mv frontend-build/frontend.tar.gz ./frontend.tar.gz

      - name: Copy artifacts to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: backend.tar.gz,frontend.tar.gz
          target: ${{ secrets.EC2_DEPLOY_PATH }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.EC2_DEPLOY_PATH }}

            sudo chown -R $USER:$USER .

            # --- Backend deployment ---
            mkdir -p backend
            mkdir -p backend/public/images
            sudo chown -R $USER:$USER backend/public/images
            sudo chmod -R 777 backend/public/images
            tar xzf backend.tar.gz -C backend --strip-components=1

            # FORCE: Create correct package.json with migration scripts
            cat > backend/package.json << 'EOF'
            {
              "name": "backend",
              "version": "1.0.0",
              "description": "",
              "main": "index.js",
              "type": "module",
              "scripts": {
                "test": "jest",
                "test-watch": "jest --watchAll",
                "build": "tsc && tsc-alias",
                "start": "node dist/server.js",
                "serve": "tsx watch src/server.ts",
                "migrate:create:users": "knex migrate:make --env=development",
                "migrate:run:users": "knex migrate:latest --env=development",
                "migrate:create:clients": "knex migrate:make --env=client_databases",
                "migrate:run:client": "knex migrate:latest --env=client_databases",
                "migrate:run:clients": "node scripts/migrate-clients.js",
                "migrate:run:users:prod": "NODE_ENV=production knex migrate:latest --env=production",
                "migrate:run:clients:prod": "NODE_ENV=production node scripts/migrate-clients.js",
                "migrate:deploy": "npm run migrate:run:users:prod && npm run migrate:run:clients:prod"
              },
              "keywords": [],
              "author": "",
              "license": "ISC",
              "dependencies": {
                "bcrypt": "^5.1.0",
                "cors": "^2.8.5",
                "csv-parser": "^3.0.0",
                "dayjs": "^1.11.10",
                "dotenv": "^16.3.1",
                "express": "^4.19.2",
                "googleapis": "^123.0.0",
                "handlebars": "^4.7.8",
                "jsonwebtoken": "^9.0.2",
                "lodash": "^4.17.21",
                "morgan": "^1.10.0",
                "multer": "^1.4.5-lts.1",
                "mysql": "^2.18.1",
                "mysql2": "^3.6.2",
                "node-cron": "^3.0.3",
                "nodemailer": "^6.10.0",
                "nodemon": "^3.0.1",
                "phone": "^3.1.42",
                "puppeteer": "^24.1.1",
                "uuid": "^11.0.5",
                "validator": "^13.11.0"
              },
              "devDependencies": {
                "@types/bcrypt": "^5.0.2",
                "@types/cors": "^2.8.17",
                "@types/dotenv": "^8.2.3",
                "@types/express": "^5.0.0",
                "@types/jest": "^29.5.14",
                "@types/jsonwebtoken": "^9.0.7",
                "@types/morgan": "^1.9.9",
                "@types/multer": "^1.4.12",
                "@types/node-cron": "^3.0.11",
                "@types/node": "^22.10.1",
                "@types/nodemailer": "^6.4.17",
                "@types/validator": "^13.12.2",
                "jest": "^29.7.0",
                "knex": "^3.1.0",
                "supertest": "^6.3.4",
                "ts-jest": "^29.2.5",
                "tsc-alias": "^1.8.10",
                "tsx": "^4.19.2",
                "typescript": "^5.7.2"
              }
            }
            EOF

            # Copy environment file
            cp backend/.env.production backend/.env
            cd backend

            # Install all dependencies (including dev for migrations)
            npm ci

            # Always run migrations (knex migrate:latest is safe - it only runs new migrations)
            echo "ðŸ”„ Running database migrations..."
            npm run migrate:deploy
            echo "âœ… Migrations completed successfully!"

            pm2 delete booking-backend || true
            pm2 start dist/server.js \
              --name booking-backend \
              --cwd ${{ secrets.EC2_DEPLOY_PATH }}/backend \
              --env production
            cd ..

            # --- Frontend deployment ---
            rm -rf frontend
            mkdir -p frontend
            tar xzf frontend.tar.gz -C frontend --strip-components=1

            # --- Clean up archives ---
            rm -f backend.tar.gz frontend.tar.gz
